from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from openai import OpenAI
import os
from dotenv import load_dotenv
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
DEEPSEEK_BASE_URL = "https://api.deepseek.com"
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek
client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
LANG, MAIN_MENU, TOPIC_DETAIL = range(3)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é –∏ —Ç–µ–∫—Å—Ç–æ–≤
MENU_STRUCTURE = {
    'en': {
        'main_menu_title': 'Main Menu',
        'topics': {
            'ü§ñ About Qubic': ['What is Qubic?', 'Project Vision', 'Key Features'],
            '‚ö° Technology': ['Useful Proof of Work', 'Aigarth AI', 'Quorum Consensus'],
            'üåç Community': ['Join Community', 'Resources', 'Development'],
            'üöÄ Get Started': ['How to Begin', 'Mining Guide', 'Developer Docs']
        },
        'phrases': {
            'main_menu_prompt': 'Please choose a topic to explore:',
            'subtopic_prompt': 'What would you like to know about this topic?',
            'back_to_main': 'üîô Back to Main Menu',
            'restart': 'üîÑ Restart',
            'wait_generation': 'üîÑ Generating response...',
            'choose_language': 'Please choose your language:',
            'welcome': "Hello! I'm Anna, your intelligent assistant for the Qubic project!",
            'error': 'Sorry, I encountered an error. Please try again.',
            'restarting': 'üîÑ Restarting conversation...'
        }
    },
    'ru': {
        'main_menu_title': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'topics': {
            'ü§ñ –û Qubic': ['–ß—Ç–æ —Ç–∞–∫–æ–µ Qubic?', '–í–∏–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏'],
            '‚ö° –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['Useful Proof of Work', '–ò–ò Aigarth', '–ö–æ–Ω—Å–µ–Ω—Å—É—Å Quorum'],
            'üåç –°–æ–æ–±—â–µ—Å—Ç–≤–æ': ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', '–†–µ—Å—É—Ä—Å—ã', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
            'üöÄ –ù–∞—á–∞—Ç—å': ['–ö–∞–∫ –Ω–∞—á–∞—Ç—å', '–ì–∞–π–¥ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É', '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']
        },
        'phrases': {
            'main_menu_prompt': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
            'subtopic_prompt': '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ?',
            'back_to_main': 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
            'restart': 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
            'wait_generation': 'üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...',
            'choose_language': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
            'welcome': "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω–Ω–∞, –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É Qubic!",
            'error': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            'restarting': 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–≥–æ–≤–æ—Ä...'
        }
    }
}

async def get_ai_response(prompt: str, language: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API"""
    try:
        system_message = {
            'en': "You are Anna, a helpful assistant for Qubic project. Provide clear, engaging answers about Qubic's decentralized AI platform, Useful Proof of Work, Aigarth AI, and related technologies. Keep responses informative but concise. Respond in English.",
            'ru': "–¢—ã –ê–Ω–Ω–∞, –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ Qubic. –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ò–ò Qubic, Useful Proof of Work, –ò–ò Aigarth –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. –ë—É–¥—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
        }
        
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": system_message[language]},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"DeepSeek API error: {e}")
        return None

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    keyboard = [
        [KeyboardButton("üá∫üá∏ English"), KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üëã Hello! I'm Anna, your intelligent assistant for the Qubic project!\n\n"
        "Please choose your preferred language:",
        reply_markup=reply_markup
    )
    return LANG

async def choose_language(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    user_choice = update.message.text
    
    if "–†—É—Å—Å–∫–∏–π" in user_choice:
        context.user_data['lang'] = 'ru'
        welcome_text = MENU_STRUCTURE['ru']['phrases']['welcome']
    else:
        context.user_data['lang'] = 'en'
        welcome_text = MENU_STRUCTURE['en']['phrases']['welcome']
    
    await update.message.reply_text(welcome_text)
    return await show_main_menu(update, context)

async def show_main_menu(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    lang = context.user_data.get('lang', 'en')
    phrases = MENU_STRUCTURE[lang]['phrases']
    topics = MENU_STRUCTURE[lang]['topics']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ + –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    keyboard = []
    for topic in topics.keys():
        keyboard.append([KeyboardButton(topic)])
    
    keyboard.append([KeyboardButton(phrases['restart'])])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(phrases['main_menu_prompt'], reply_markup=reply_markup)
    
    return MAIN_MENU

async def handle_main_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    lang = context.user_data.get('lang', 'en')
    chosen_topic = update.message.text
    topics = MENU_STRUCTURE[lang]['topics']
    phrases = MENU_STRUCTURE[lang]['phrases']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if chosen_topic == phrases['restart']:
        return await restart_bot(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–µ–Ω—é
    current_topic = None
    for topic, subtopics in topics.items():
        if topic == chosen_topic:
            current_topic = topic
            break
    
    if not current_topic:
        await update.message.reply_text(phrases['error'])
        return await show_main_menu(update, context)
    
    context.user_data['current_topic'] = current_topic
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–µ–º–∞–º–∏
    subtopics = topics[current_topic]
    keyboard = []
    for subtopic in subtopics:
        keyboard.append([KeyboardButton(subtopic)])
    keyboard.append([KeyboardButton(phrases['back_to_main'])])
    keyboard.append([KeyboardButton(phrases['restart'])])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(phrases['subtopic_prompt'], reply_markup=reply_markup)
    
    return TOPIC_DETAIL

async def handle_topic_detail(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
    lang = context.user_data.get('lang', 'en')
    chosen_subtopic = update.message.text
    phrases = MENU_STRUCTURE[lang]['phrases']
    current_topic = context.user_data.get('current_topic')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if chosen_subtopic == phrases['restart']:
        return await restart_bot(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if chosen_subtopic == phrases['back_to_main']:
        return await show_main_menu(update, context)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    wait_message = await update.message.reply_text(phrases['wait_generation'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
    prompt = f"Topic: {current_topic}. Question: {chosen_subtopic}. Provide detailed but concise information about this aspect of Qubic project."
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
    ai_response = await get_ai_response(prompt, lang)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await wait_message.delete()
    
    if ai_response:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        topics_dict = MENU_STRUCTURE[lang]['topics']
        subtopics_list = topics_dict[current_topic]
        
        keyboard = []
        for subtopic in subtopics_list:
            keyboard.append([KeyboardButton(subtopic)])
        keyboard.append([KeyboardButton(phrases['back_to_main'])])
        keyboard.append([KeyboardButton(phrases['restart'])])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(ai_response, reply_markup=reply_markup)
    else:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        fallback_responses = {
            'en': {
                'What is Qubic?': 'ü§ñ **Qubic** is a decentralized platform for creating Artificial General Intelligence (AGI) that uses Useful Proof of Work instead of wasteful computations.',
                'Useful Proof of Work': '‚ö° **Useful Proof of Work (uPoW)** is an innovative consensus mechanism that performs meaningful computations instead of energy-wasting mining operations.',
                'Aigarth AI': 'üß† **Aigarth** is the advanced artificial intelligence system developed by the Qubic project, designed to operate in a decentralized environment.',
                'Join Community': 'üåç Join our growing community! Connect with developers and enthusiasts through our Telegram groups and Discord server.'
            },
            'ru': {
                '–ß—Ç–æ —Ç–∞–∫–æ–µ Qubic?': 'ü§ñ **Qubic** - —ç—Ç–æ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (AGI), –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è Useful Proof of Work –≤–º–µ—Å—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.',
                'Useful Proof of Work': '‚ö° **Useful Proof of Work (uPoW)** - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞.',
                '–ò–ò Aigarth': 'üß† **Aigarth** - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø—Ä–æ–µ–∫—Ç–æ–º Qubic –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ.',
                '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è': 'üåç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Ä–∞—Å—Ç—É—â–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É! –û–±—â–∞–π—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–∞—à–∏ –≥—Ä—É–ø–ø—ã –≤ Telegram –∏ Discord.'
            }
        }
        
        fallback_response = fallback_responses[lang].get(chosen_subtopic, phrases['error'])
        
        keyboard = []
        topics_dict = MENU_STRUCTURE[lang]['topics']
        subtopics_list = topics_dict[current_topic]
        for subtopic in subtopics_list:
            keyboard.append([KeyboardButton(subtopic)])
        keyboard.append([KeyboardButton(phrases['back_to_main'])])
        keyboard.append([KeyboardButton(phrases['restart'])])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(fallback_response, reply_markup=reply_markup)
    
    return TOPIC_DETAIL

async def restart_bot(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    lang = context.user_data.get('lang', 'en')
    phrases = MENU_STRUCTURE[lang]['phrases']
    
    await update.message.reply_text(phrases['restarting'])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    keyboard = [
        [KeyboardButton("üá∫üá∏ English"), KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    welcome_text = "üëã Hello! I'm Anna, your intelligent assistant for the Qubic project!\n\nPlease choose your preferred language:"
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return LANG

async def cancel(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    lang = context.user_data.get('lang', 'en')
    goodbye_text = "Thank you for chatting with me! Use /start to begin again." if lang == 'en' else "–°–ø–∞—Å–∏–±–æ –∑–∞ –±–µ—Å–µ–¥—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞."
    
    await update.message.reply_text(goodbye_text)
    return ConversationHandler.END

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_language)],
                MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
                TOPIC_DETAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_topic_detail)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        application.add_handler(conv_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç Anna —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...")
        print("üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API python-telegram-bot")
        print("üîë DeepSeek API –∫–ª—é—á:", DEEPSEEK_API_KEY[:10] + "..." + DEEPSEEK_API_KEY[-5:])
        print("‚èπ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == '__main__':
    main()